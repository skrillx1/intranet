<?php

namespace Drupal\all_leaves\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\Database\Connection;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;

class AllLeavesController extends ControllerBase {

    /**
     * The database connection.
     *
     * @var \Drupal\Core\Database\Connection
     */
    protected $database;

    /**
     * Constructs a AllLeavesController object.
     *
     * @param \Drupal\Core\Database\Connection $database
     *   The database connection.
     */
    public function __construct(Connection $database) {
        $this->database = $database;
    }

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container) {
        return new static(
        $container->get('database')
        );
    }

    /**
     * Displays leave information.
     *
     * @return array
     *   A render array containing the leave information.
     */
    public function displayLeaves() {
        $username = \Drupal::currentUser()->getAccountName();
        $cache_tags = ['request_leave_table'];

        $header = [
            'Username',
            'Start Date',
            'End Date',
            'Date Filed',
            'Leave Type',
            'Status',
            'Action',
        ];

        $query = $this->database->select('request_leave_table', 'rlt')
        ->fields('rlt', ['id', 'start_date', 'end_date', 'date_filed', 'leave_type', 'status', 'other', 'username'])
        // ->condition('rlt.username', $username)
        ->addTag('request_leave_table_cache_tag');
        $results = $query->execute()->fetchAll();

        $rows = [];
        foreach ($results as $result) {
        $leaveType = !empty($result->other) ? $result->leave_type . ' - ' . $result->other : $result->leave_type;
        $viewUrl = Url::fromRoute('all_leaves.view_leave', ['id' => $result->id]);
        
        $approve_disabled = $result->status == 'Approved' || $result->status == 'Denied';
        $deny_disabled = $result->status == 'Approved' || $result->status == 'Denied';
        
        $approveUrl = Url::fromRoute('all_leaves.approve_leave', ['id' => $result->id]);

        $approveLink = [
            '#markup' => $approve_disabled ? '<span class="approve-link disabled">' . $this->t('Approve') . '</span>' : Link::fromTextAndUrl($this->t('Approve'), $approveUrl)->toString(),
        ];

        $denyUrl = Url::fromRoute('all_leaves.deny_leave', ['id' => $result->id]);

        $denyLink = [
            '#markup' => $deny_disabled ? '<span class="deny-link disabled">' . $this->t('Deny') . '</span>' : Link::fromTextAndUrl($this->t('Deny'), $denyUrl)->toString(),
        ];
        
        $rows[] = [
            $result->username,
            $result->start_date,
            $result->end_date,
            $result->date_filed,
            $leaveType,
            $result->status,
            [
            'data' => [
                '#type' => 'container',
                'actions' => [
                '#type' => 'container',
                'view' => [ 
                    '#type' => 'link',
                    '#title' => $this->t('View '),
                    '#url' => $viewUrl,
                    '#attributes' => [
                    'class' => ['view-link'],
                    ],
                ],
                'approve' => $approveLink,
                'deny' => $denyLink,
                ],
            ],
            ],
        ];
        }

        $table = [
        '#type' => 'table',
        '#header' => $header,
        '#rows' => $rows,
        '#cache' => [
            'tags' => $cache_tags,
            'max-age' => 0,
        ],
        ];

        // Create the button element.
        $button = [
            '#type' => 'link',
            '#title' => $this->t('Request Leave'),
            '#url' => Url::fromUri('http://localhost:30080/request-leave'),
            '#attributes' => [
            'class' => ['all-leaves-button'],
            ],
        ];

        // Add the button to the top of the table.
        $table_with_button = [
            '#type' => 'container',
            '#attributes' => [
            'class' => ['all-leaves-container'],
            ],
            'button' => $button,
            'table' => $table,
        ];

        return $table_with_button;
    }

    /**
     * Displays details of a specific leave.
     *
     * @param int $id
     *   The ID of the leave to display.
     *
     * @return array
     *   A render array containing the leave details.
     */
    public function viewLeave($id) {
        $cache_tags = ['request_leave_table'];

        $query = $this->database->select('request_leave_table', 'rlt')
        ->fields('rlt', ['id', 'start_date', 'end_date', 'date_filed', 'leave_type', 'status', 'other', 'supporting_documents'])
        ->condition('rlt.id', $id)
        ->addTag('request_leave_table_cache_tag');
        $result = $query->execute()->fetch();

        if (empty($result)) {
        drupal_set_message($this->t('Leave not found'), 'error');
        return $this->redirect('all_leaves.display_leaves');
        }

        $leaveType = !empty($result->other) ? $result->leave_type . ' - ' . $result->other : $result->leave_type;

        $backUrl = Url::fromRoute('all_leaves.display_leaves');
        $backLink = Link::fromTextAndUrl($this->t('Back to Leave List'), $backUrl);

        $convertedStartDate = \Drupal::service('date.formatter')->format(strtotime($result->start_date), 'custom', 'F j, Y');
        $convertedEndDate = \Drupal::service('date.formatter')->format(strtotime($result->end_date), 'custom', 'F j, Y');
        $convertedDateFiled = \Drupal::service('date.formatter')->format(strtotime($result->date_filed), 'custom', 'F j, Y');

        $supportingDocumentFiles = [];
        if (!empty($result->supporting_documents)) {
        $supportingDocumentFiles = File::loadMultiple([$result->supporting_documents]);
        }
        if (!empty($supportingDocumentFiles)) {
        $supportingDocuments = [];
        foreach ($supportingDocumentFiles as $file) {
            $file_url_generator = \Drupal::service('file_url_generator');
            $file_url = $file_url_generator->generateAbsoluteString($file->getFileUri());
            $filename = $file->getFilename();
            $supportingDocuments[] = '<a href="' . $file_url . '" target="_blank">' . $filename . '</a>';
        }
        $supportingDocuments = implode(', ', $supportingDocuments);
        } else {
        $supportingDocuments = 'None';
        }

        $details = [
        '#markup' => $this->t('
            <p><strong>' . $leaveType . '</strong></p>
            <p><strong>Status: </strong>' . $result->status . '</p>
            <p><strong>Duration: </strong>' . $convertedStartDate . ' - ' . $convertedEndDate . '</p>
            <p><strong>Date Filed: </strong>' . $convertedDateFiled . '</p>
            <p><strong>Supporting Document: </strong>' . $supportingDocuments . '</p>', 
        ),
        ];

        $output = [
        '#theme' => 'item_list',
        '#items' => $details,
        '#cache' => [
            'tags' => $cache_tags,
            'max-age' => 0,
        ]
        ];

        // Add a back link.
        $output['back_link'] = [
        '#markup' => $backLink->toString(),
        ];

        return $output;
    }

    /**
     * Approve leave action.
     *
     * @param int $id
     *   The ID of the leave request to be approved.
     *
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     *   A redirect response.
     */
    public function approveLeave($id) {
        // Perform any necessary validation and access checks.

        // Update the status to 'Approved' in the database.
        $update = $this->database->update('request_leave_table')
            ->fields(['status' => 'Approved'])
            ->condition('id', $id)
            ->execute();

        // Clear cache tags related to the leave table.
        Cache::invalidateTags(['request_leave_table']);

        // Redirect back to the leave display page.
        return new RedirectResponse(Url::fromRoute('all_leaves.display_leaves')->toString());
    }

    /**
     * Deny leave action.
     *
     * @param int $id
     *   The ID of the leave request to be denied.
     *
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     *   A redirect response.
     */
    public function denyLeave($id) {
        // Perform any necessary validation and access checks.

        // Update the status to 'Denied' in the database.
        $update = $this->database->update('request_leave_table')
            ->fields(['status' => 'Denied'])
            ->condition('id', $id)
            ->execute();

        // Clear cache tags related to the leave table.
        Cache::invalidateTags(['request_leave_table']);

        // Redirect back to the leave display page.
        return new RedirectResponse(Url::fromRoute('all_leaves.display_leaves')->toString());
    }
}