<?php

/**
 * @file
 * Contains google_calendar_service.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\google_calendar_service\Entity\Calendar;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function google_calendar_service_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] == 'gcs_calendar_event') {
    $calendar_id = $form_state->getValue('field_calendar')[0];
    $entity_form['#entity']->setCalendarId($calendar_id);
    $entity_form['#element_validate'][] = '_validate_time_save_google_event';
    $entity_form['#ief_element_submit'][] = '_save_google_event_form_submit';
    $submit_handlers = $form_state->getSubmitHandlers();
    $submit_handlers[] = '_save_google_event_form_submit';
    $form_state->setSubmitHandlers($submit_handlers);
  }
}

function _save_google_event_form_submit(array &$form, FormStateInterface $form_state) {
  $start_date = $form_state->getValue('field_session_details')[0]['inline_entity_form']['start_date'][0]['value'];
  $end_date = $form_state->getValue('field_session_details')[0]['inline_entity_form']['end_date'][0]['value'];
  $name = $form_state->getValue('field_session_details')[0]['inline_entity_form']['name'][0]['value'];
  $location = $form_state->getValue('field_session_details')[0]['inline_entity_form']['location'][0]['value'];
  $description = $form_state->getValue('field_session_details')[0]['inline_entity_form']['description'][0]['value'];
  if ($start_date instanceof DrupalDateTime && $end_date instanceof DrupalDateTime) {
    $start_date = date('c', $start_date->getTimestamp());
    $end_date = date('c', $end_date->getTimestamp());
    $calendar_id = $form_state->getValue('field_calendar')[0]['target_id'];
    $calendar = \Drupal::entityTypeManager()->getStorage('gcs_calendar')->load($calendar_id);
    $calendarId = $calendar->get('calendar_id')->value;
    $event_id = NULL;
    if ($form['#entity']->hasField('event_id')) {
      $event_id = $form['#entity']->get('event_id')->value;
    }
    $editEventService = \Drupal::service('google_calendar_service.edit_events');
    $timezone = $editEventService->service->calendars->get($calendarId)->getTimeZone();
    if ($event_id) {
      $data['name'] = $name;
      $data['location'] = $location;
      $data['description'] = $description;
      $data['startDate'] = $start_date;
      $data['endDate'] = $end_date;
      $editEventService->patchCalendar($calendarId, $event_id, $data, $timezone);
    }
    else {
      $event = $editEventService->addCalendarEvent($calendarId, $name, $location, $description, $start_date, $end_date, $timezone);
      $form['#entity']->get('event_id')->setValue([$event->id]);
    }
  }
}

function _validate_time_save_google_event(array $form, FormStateInterface $form_state) {
  $start_date = $form_state->getValue('field_session_details')[0]['inline_entity_form']['start_date'][0]['value'];
  $end_date = $form_state->getValue('field_session_details')[0]['inline_entity_form']['end_date'][0]['value'];
  $name = $form_state->getValue('field_session_details')[0]['inline_entity_form']['name'][0]['value'];
  $location = $form_state->getValue('field_session_details')[0]['inline_entity_form']['location'][0]['value'];
  $description = $form_state->getValue('field_session_details')[0]['inline_entity_form']['description'][0]['value'];
  if ($start_date instanceof DrupalDateTime && $end_date instanceof DrupalDateTime) {
    $start_date = date('c', $start_date->getTimestamp());
    $end_date = date('c', $end_date->getTimestamp());
    $calendar_id = $form_state->getValue('field_calendar')[0]['target_id'];
    $calendar = \Drupal::entityTypeManager()->getStorage('gcs_calendar')->load($calendar_id);
    $calendarId = $calendar->get('calendar_id')->value;
    $editEventService = \Drupal::service('google_calendar_service.edit_events');
    $event_id = NULL;
    if ($form['#entity']->hasField('event_id')) {
      $event_id = $form['#entity']->get('event_id')->value;
    }
    $time_available = $editEventService->verifyTimeGoogleCalendar($calendarId, $start_date, $end_date, $event_id);
    //Error message set in verifyTimeGoogleCalendar method.
  }
}

/**
 * Implements hook_help().
 */
function google_calendar_service_help(
  $route_name,
  RouteMatchInterface $route_match) {

  switch ($route_name) {
    // Main module help for the google_calendar_service module.
    case 'help.page.google_calendar_service':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t(
        'Provides an integration with Google Calendar and its events.'
      ) . '</p>';
      return $output;

    default:
      break;
  }
}


/**
 * Implements hook_ENTITY_TYPE_update().
 */
function google_calendar_service_gcs_calendar_event_update(EntityInterface $entity) {
  $calendar = \Drupal::entityTypeManager()->getStorage('gcs_calendar')->load($entity->get('calendar')->target_id);
  \Drupal::service('google_calendar_service.edit_events')->setEventUrl($entity, $calendar);
}

use Drupal\Core\StringTranslation\TranslatableMarkup;
function google_calendar_service_update_8201() {
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Event URL'))
    ->setDescription(new TranslatableMarkup("The url for the calendar event"))
    ->setSettings(["max_length" => 1024, "text_processing" => 0])
    ->setDefaultValue("")
    ->setDisplayOptions("view", ["label" => "above", "type" => "string", "weight" => 0])
    ->setDisplayOptions("form", ["type" => "string_textfield", "weight" => 0]);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('event_url', 'gcs_calendar_event', 'google_calendar_service', $field_storage_definition);
}

/**
 * Implements hook_cron().
 *
 * Queues calendars for import.
 */
function google_calendar_service_cron() {
  $secret_uri = \Drupal::config('google_calendar_service.default')
    ->get('secret_file_uri');

  if (!empty($secret_uri)) {
    $queue = \Drupal::queue('gcs_calendar_import_processor');

    $query = \Drupal::entityTypeManager()
      ->getStorage('gcs_calendar')
      ->getQuery();

    $cids = $query
            ->condition('status', 1)
            ->accessCheck(FALSE)
            ->execute();

    $calendars = Calendar::loadMultiple($cids);
    
    foreach ($calendars as $calendar) {
      $queue->createItem($calendar);
    }
  }
}

/**
 * Prepares variables for Calendar templates.
 *
 * Default template: calendar-event.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function google_calendar_service_preprocess_calendar_event(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

use Drupal\Core\Field\BaseFieldDefinition;
function google_calendar_service_update_8200() {
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Validate date and time is available.'))
    ->setSettings([
      'on_label' => t('Yes'),
      'off_label' => t('No'),
    ])
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
      'weight' => 20,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDefaultValue(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('validate_date', 'gcs_calendar', 'google_calendar_service', $field_storage_definition);
}


/**
 * Prepares variables for Google Calendar templates.
 *
 * Default template: calendar.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function google_calendar_service_preprocess_google_calendar(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_views_pre_view().
 */
function google_calendar_service_views_pre_view(
  ViewExecutable $view,
  $display_id,
  array &$args) {

  // Store the calendar id.
  $tempStore = \Drupal::service('tempstore.private')
    ->get('google_calendar_service');

  if (isset($view->args[0])) {
    $tempStore->set('calendarId', $view->args[0]);
  }

}

/**
 * Implements hook_entity_view_alter().
 */
function google_calendar_service_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() === 'gcs_calendar') {
    $build['#prefix'] = '
      <ul class="local-actions">
        <li class="local-actions__item"><a href="/calendar/'.$entity->id().'/events" class="button button--primary">List Events</a></li>
        <li class="local-actions__item"><a href="/calendar/'.$entity->id().'/event/add" class="button button--action button--primary">Add Event</a></li>
      </ul>';
  }
}

